Binary Search Algo
------------------
def binary_search(list, item):
	low = 0	
	high = len(list)—1
	while low <= high:
		mid = (low + high)
		guess = list[mid]
		if guess == item:
			return mid
		if guess > item:
			high = mid - 1
		else:
			low = mid + 1
	return None
my_list = [1, 3, 5, 7, 9]
print binary_search(my_list, 3) # => 1
print binary_search(my_list, -1) # => None

• Binary search is a lot faster than simple search.
• You can run binary search only on a sorted list of elements.
• O(log n) is faster than O(n), but it gets a lot faster once the list of
items you’re searching through grows.
• Algorithm speed isn’t measured in seconds.
• Algorithm times are measured in terms of growth of an algorithm.
• Algorithm times are written in Big O notation.

EXERCISES
1.1 Suppose you have a sorted list of 128 names, and you’re searching
through it using binary search. What’s the maximum number of
steps it would take?
1.2 Suppose you double the size of the list. What’s the maximum
number of steps now?

EXERCISES
Give the run time for each of these scenarios in terms of Big O.
1.3 You have a name, and you want to ind the person’s phone number
in the phone book.
1.4 You have a phone number, and you want to ind the person’s name
in the phone book. (Hint: You’ll have to search through the whole
book!)
1.5 You want to read the numbers of every person in the phone book.
1.6 You want to read the numbers of just the As. (his is a tricky one!
It involves concepts that are covered more in chapter 4. Read the
answer—you may be surprised!)

Linked List
----------
Suppose you want to read the last item in a linked list. You can’t just read it, because you don’t know what
address it’s at. Instead, you have to go to item #1 to get the address for item #2. Then you have to go to item #2 to get the address for item #3. And so on, until you get to the last item. Linked lists are great if you’re going to read all the items one at a time: you can read one item, follow the address to the next item, and so on. But if you’re going to keep jumping around, linked lists are terrible.

Lists are better if you want to insert elements into the middle.

For Deletion, lists are better, because you just need to change what the previous element points to. With arrays, everything needs to be moved up when you delete an element. Unlike insertions, deletions will always work. Insertions can fail sometimes when there’s no space let in memory. But you can always delete an element. 

Sequential access means reading the elements one by one, starting at the irst element. Linked lists can only do sequential access.

Arrays
------
Arrays are great if you want to read random elements, because you can look up any element in your array instantly. The elements in an array are numbered. his numbering starts from 0, not 1.

Array supports random access.

Run time for Arrays & Lists
Reading    : O(1)     O(n)
Insertion  : O(n)     O(1)
Deletion   : O(n)     O(1)

Selection Sort
--------------

def findSmallest(arr):
	smallest = arr[0] //Stores the smallest value
	smallest_index = 0 //Stores the index of the smallest value
	for i in range(1, len(arr)):
		if arr[i] < smallest:
			smallest = arr[i]
			smallest_index = i
return smallest_index

def selectionSort(arr): //Sorts an array
newArr = []
	for i in range(len(arr)):
		smallest = findSmallest(arr) //Finds the smallest element in the array, and adds it to the new array
		newArr.append(arr.pop(smallest))
return newArr

print selectionSort([5, 3, 6, 2, 10])

Recursion
--------
def countdown(i):
 print if
 if i<=0:
 return
 else:
 countdown(i-1)
 
Stack
-----
PUSH - add a new item to the top
POP - Remove the topmost item and read it